# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-12-10 08:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es_ES\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "OpenID Connect (OIDC) and OAuth2 client and filters"
msgstr "Cliente y filtros OpenID Connect (OIDC) y OAuth2"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can use Quarkus extensions for OpenID Connect and OAuth 2.0 access token management, focusing on acquiring, refreshing, and propagating tokens."
msgstr "Puede utilizar las extensiones de Quarkus para la gestión de tokens de acceso OpenID Connect y OAuth 2.0, centrándose en la adquisición, actualización y propagación de tokens."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "This includes the following:"
msgstr "Esto incluye lo siguiente:"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using `quarkus-oidc-client`, `quarkus-oidc-client-reactive-filter` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenID Connect and OAuth 2.0 compliant Authorization Servers such as link:https://www.keycloak.org[Keycloak]."
msgstr "Uso de las extensiones `quarkus-oidc-client` , `quarkus-oidc-client-reactive-filter` y `quarkus-oidc-client-filter` para adquirir y actualizar tokens de acceso desde OpenID Connect y servidores de autorización compatibles con OAuth 2.0 como link:https://www.keycloak.org[Keycloak] ."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using `quarkus-oidc-token-propagation-reactive` and `quarkus-oidc-token-propagation` extensions to propagate the current `Bearer` or `Authorization Code Flow` access tokens."
msgstr "Utilizar las extensiones `quarkus-oidc-token-propagation-reactive` y `quarkus-oidc-token-propagation` para propagar los tokens de acceso actuales `Bearer` o `Authorization Code Flow` ."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
msgstr "Los tokens de acceso gestionados por estas extensiones pueden utilizarse como tokens de portador de autorización HTTP para acceder a los servicios remotos."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Also see xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart]."
msgstr "Consulte también la xref:security-openid-connect-client.adoc[guía rápida sobre el cliente OpenID Connect y la propagación de tokens] ."

#. type: Title ==
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "OidcClient"
msgstr "OidcClient"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Add the following dependency:"
msgstr "Añade la siguiente dependencia:"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The `quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient`, which can be used to acquire and refresh tokens using SmallRye Mutiny `Uni` and `Vert.x WebClient`."
msgstr "La extensión `quarkus-oidc-client` proporciona un reactivo `io.quarkus.oidc.client.OidcClient` , que puede utilizarse para adquirir y refrescar fichas utilizando SmallRye Mutiny `Uni` y `Vert.x WebClient` ."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClient` is initialized at build time with the IDP token endpoint URL, which can be auto-discovered or manually configured. `OidcClient` uses this endpoint to acquire access tokens by using token grants such as `client_credentials` or `password` and refresh the tokens by using a `refresh_token` grant."
msgstr "`OidcClient` se inicializa en el momento de la compilación con la URL del punto final de tokens IDP, que puede ser autodescubierto o configurado manualmente. `OidcClient` utiliza este punto final para adquirir tokens de acceso mediante subvenciones de tokens como `client_credentials` o `password` y refrescar los tokens mediante una subvención `refresh_token` ."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Token endpoint configuration"
msgstr "Configuración del punto final de token"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "By default, the token endpoint address is discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc-client.auth-server-url`."
msgstr "Por defecto, la dirección del punto final de token se descubre añadiendo una ruta `/.well-known/openid-configuration` a la configurada `quarkus.oidc-client.auth-server-url` ."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "For example, given this Keycloak URL:"
msgstr "Por ejemplo, dada esta URL de Keycloak:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClient` will discover that the token endpoint URL is `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens`."
msgstr "`OidcClient` descubrirá que la URL del punto final del token es `&lt;a href=\"http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\" class=\"bare\"&gt;http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens&lt;/a&gt;`."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Alternatively, if the discovery endpoint is unavailable or you want to save on the discovery endpoint round-trip, you can disable the discovery and configure the token endpoint address with a relative path value. For example:"
msgstr "Alternativamente, si el punto final de descubrimiento no está disponible o desea ahorrar en el viaje de ida y vuelta del punto final de descubrimiento, puede desactivar el descubrimiento y configurar la dirección del punto final de token con un valor de ruta relativo. Por ejemplo:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "A more compact way to configure the token endpoint URL without the discovery is to set `quarkus.oidc-client.token-path` to an absolute URL:"
msgstr "Una forma más compacta de configurar la URL del punto final del token sin el descubrimiento es establecer `quarkus.oidc-client.token-path` a una URL absoluta:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Setting `quarkus.oidc-client.auth-server-url` and `quarkus.oidc-client.discovery-enabled` is not required in this case."
msgstr "En este caso no es necesario configurar `quarkus.oidc-client.auth-server-url` y `quarkus.oidc-client.discovery-enabled` ."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Supported token grants"
msgstr "Ayudas a las fichas"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The main token grants that `OidcClient` can use to acquire the tokens are the `client_credentials` (default) and `password` grants."
msgstr "Las principales concesiones de fichas que `OidcClient` puede utilizar para adquirir las fichas son las concesiones `client_credentials` (por defecto) y `password` ."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Client credentials grant"
msgstr "Concesión de credenciales de cliente"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgstr "Así es como se puede configurar `OidcClient` para utilizar la subvención `client_credentials`:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The `client_credentials` grant allows setting extra parameters for the token request by using `quarkus.oidc-client.grant-options.client.<param-name>=<value>`. Here is how to set the intended token recipient by using the `audience` parameter:"
msgstr "La subvención `client_credentials` permite establecer parámetros adicionales para la solicitud del token utilizando `quarkus.oidc-client.grant-options.client.<param-name>=<value>` . A continuación se explica cómo establecer el destinatario previsto del token utilizando el parámetro `audience` :"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Password grant"
msgstr "Concesión de contraseña"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr "Así es como se puede configurar `OidcClient` para utilizar la subvención `password`:"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "It can be further customized by using a `quarkus.oidc-client.grant-options.password` configuration prefix, similar to how the client credentials grant can be customized."
msgstr "Puede personalizarse aún más utilizando un prefijo de configuración `quarkus.oidc-client.grant-options.password` , de forma similar a como puede personalizarse la concesión de credenciales de cliente."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Other grants"
msgstr "Otras subvenciones"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClient` can also help acquire the tokens by using grants that require some extra input parameters that cannot be captured in the configuration. These grants are `refresh_token` (with the external refresh token), `authorization_code`, and two grants which can be used to exchange the current access token, namely, `urn:ietf:params:oauth:grant-type:token-exchange` and `urn:ietf:params:oauth:grant-type:jwt-bearer`."
msgstr "`OidcClient` también puede ayudar a adquirir los tokens utilizando subvenciones que requieren algunos parámetros de entrada adicionales que no pueden capturarse en la configuración. Estas concesiones son `refresh_token` (con el token de actualización externo), `authorization_code` , y dos concesiones que pueden utilizarse para intercambiar el token de acceso actual, a saber, `urn:ietf:params:oauth:grant-type:token-exchange` y `urn:ietf:params:oauth:grant-type:jwt-bearer` ."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"If you need to acquire an access token and have posted an existing refresh token to the current Quarkus endpoint, you must use the `refresh_token` grant. This grant employs an out-of-band refresh token to obtain a new token set.\n"
"In this case, configure `OidcClient` as follows:"
msgstr "Si necesita adquirir un token de acceso y ha enviado un token de actualización existente al punto final actual de Quarkus, debe utilizar la concesión `refresh_token` . Esta concesión emplea un token de actualización fuera de banda para obtener un nuevo conjunto de tokens. En este caso, configure `OidcClient` como sigue:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Then you can use the `OidcClient.refreshTokens` method with a provided refresh token to get the access token."
msgstr "A continuación, puede utilizar el método `OidcClient.refreshTokens` con un token de actualización proporcionado para obtener el token de acceso."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "Using the `urn:ietf:params:oauth:grant-type:token-exchange` or `urn:ietf:params:oauth:grant-type:jwt-bearer` grants might be required if you are building a complex microservices application and want to avoid the same `Bearer` token be propagated to and used by more than one service. See <<token-propagation-reactive,Token Propagation in MicroProfile RestClient Reactive filter>> and <<token-propagation,Token Propagation in MicroProfile RestClient filter>> for more details."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using `OidcClient` to support the `authorization code` grant might be required if, for some reason, you cannot use the xref:security-oidc-code-flow-authentication.adoc[Quarkus OIDC extension] to support Authorization Code Flow. If there is a very good reason for you to implement Authorization Code Flow, then you can configure `OidcClient` as follows:"
msgstr "El uso de `OidcClient` para apoyar la concesión de `authorization code` puede ser necesario si, por alguna razón, no puede utilizar la xref:security-oidc-code-flow-authentication.adoc[extensión OIDC de Quarkus] para apoyar el Flujo de Códigos de Autorización. Si existe una muy buena razón para que usted implemente el Flujo de Códigos de Autorización, entonces puede configurar `OidcClient` de la siguiente manera:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Then, you can use the `OidcClient.accessTokens` method to accept a Map of extra properties and pass the current `code` and `redirect_uri` parameters to exchange the authorization code for the tokens."
msgstr "A continuación, puede utilizar el método `OidcClient.accessTokens` para aceptar un mapa de propiedades adicionales y pasar los parámetros actuales `code` y `redirect_uri` para intercambiar el código de autorización por los tokens."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClient` also supports the `urn:openid:params:grant-type:ciba` grant:"
msgstr "`OidcClient` también apoya la subvención `urn:openid:params:grant-type:ciba` :"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Then, you can use the `OidcClient.accessTokens` method to accept a Map of extra properties and pass the `auth_req_id` parameter to exchange the token authorization code."
msgstr "A continuación, puede utilizar el método `OidcClient.accessTokens` para aceptar un mapa de propiedades adicionales y pasar el parámetro `auth_req_id` para intercambiar el código de autorización del token."

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Grant scopes"
msgstr "Ámbito de aplicación de la subvención"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"You might need to request that a specific set of scopes be associated with an issued access token.\n"
"Use a dedicated `quarkus.oidc-client.scopes` list property, for example: `quarkus.oidc-client.scopes=email,phone`"
msgstr "Puede que necesite solicitar que un conjunto específico de ámbitos se asocie a un token de acceso emitido. Utilice una propiedad dedicada de la lista `quarkus.oidc-client.scopes` , por ejemplo: `quarkus.oidc-client.scopes=email,phone`"

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Use OidcClient directly"
msgstr "Utilizar directamente OidcClient"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "One can use `OidcClient` directly as follows:"
msgstr "Se puede utilizar directamente `OidcClient` de la siguiente manera:"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Inject tokens"
msgstr "Inyectar fichas"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can inject `Tokens` that use `OidcClient` internally. `Tokens` can be used to acquire the access tokens and refresh them if necessary:"
msgstr "Puede inyectar `Tokens` que utilice internamente `OidcClient` . `Tokens` puede utilizarse para adquirir los tokens de acceso y actualizarlos si es necesario:"

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Use OidcClients"
msgstr "Utilizar OidcClients"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`io.quarkus.oidc.client.OidcClients` is a container of ``OidcClient``s - it includes a default `OidcClient` and named clients which can be configured like this:"
msgstr "`io.quarkus.oidc.client.OidcClients` es un contenedor de `OidcClient`s - incluye un `OidcClient` por defecto y clientes con nombre que pueden ser configurados así:"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "In this case, the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
msgstr "En este caso, el cliente por defecto se desactiva con una propiedad `client-enabled=false` . Se puede acceder al cliente `jwt-secret` de la siguiente manera:"

#. type: delimited block =
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy], and each OIDC tenant has its own associated `OidcClient`, you can use a Vert.x `RoutingContext` `tenantId` attribute. For example:"
msgstr "Si también utiliza xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy] , y cada tenant OIDC tiene su propio `OidcClient` asociado, puede utilizar un atributo Vert.x `RoutingContext` `tenantId` . Por ejemplo:"

#. type: delimited block =
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you need, you can also create a new `OidcClient` programmatically like this:"
msgstr "Si lo necesita, también puede crear un nuevo `OidcClient` mediante programación de la siguiente manera:"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Inject named OidcClient and tokens"
msgstr "Inyectar OidcClient con nombre y tokens"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "In case of multiple configured `OidcClient` objects, you can specify the `OidcClient` injection target by the extra qualifier `@NamedOidcClient` instead of working with `OidcClients`:"
msgstr "En caso de múltiples objetos `OidcClient` configurados, puede especificar el objetivo de inyección `OidcClient` mediante el calificador extra `@NamedOidcClient` en lugar de trabajar con `OidcClients` :"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The same qualifier can be used to specify the `OidcClient` used for a `Tokens` injection:"
msgstr "El mismo calificador puede utilizarse para especificar el `OidcClient` utilizado para una inyección de `Tokens`:"

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Use OidcClient in RestClient Reactive ClientFilter"
msgstr "Utilizar OidcClient en RestClient Reactive ClientFilter"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Add the following Maven Dependency:"
msgstr "Añade la siguiente dependencia de Maven:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Note it will also bring `io.quarkus:quarkus-oidc-client`."
msgstr "Tenga en cuenta que también traerá `io.quarkus:quarkus-oidc-client`."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`quarkus-oidc-client-reactive-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter`."
msgstr "`quarkus-oidc-client-reactive-filter` La extensión proporciona `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter`."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "It works similarly to the way `OidcClientRequestFilter` does (see <<oidc-client-filter,Use OidcClient in MicroProfile RestClient client filter>>) - it uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value. The difference is that it works with xref:rest-client-reactive.adoc[Reactive RestClient] and implements a non-blocking client filter that does not block the current IO thread when acquiring or refreshing the tokens."
msgstr ""

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClientRequestReactiveFilter` delays an initial token acquisition until it is executed to avoid blocking an IO thread."
msgstr "`OidcClientRequestReactiveFilter` retrasa la adquisición de un testigo inicial hasta su ejecución para evitar el bloqueo de un hilo IO."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `OidcClientRequestReactiveFilter` by using either `io.quarkus.oidc.client.reactive.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "Puede registrar `OidcClientRequestReactiveFilter` de forma selectiva utilizando las anotaciones `io.quarkus.oidc.client.reactive.filter.OidcClientFilter` o `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` :"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "or"
msgstr "o"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid ""
"`OidcClientRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-reactive-filter.client-name` configuration property.\n"
"You can also select `OidcClient` by setting the `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-reactive-filter.client-name` configuration property.\n"
"For example, given <<use-oidc-clients,this>> `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr ""

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Use OidcClient in RestClient ClientFilter"
msgstr "Utilizar OidcClient en RestClient ClientFilter"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` Jakarta REST ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
msgstr "`quarkus-oidc-client-filter` La extensión proporciona `io.quarkus.oidc.client.filter.OidcClientRequestFilter` Jakarta REST ClientRequestFilter que utiliza `OidcClient` para adquirir el token de acceso, actualizarlo si es necesario, y establecerlo como un valor de esquema HTTP `Authorization` `Bearer` ."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "By default, this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short-lived and refresh tokens are unavailable, then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
msgstr "Por defecto, este filtro obtendrá `OidcClient` para adquirir el primer par de tokens de acceso y de refresco en su tiempo de inicialización. Si los tokens de acceso son de corta duración y los tokens de refresco no están disponibles, entonces la adquisición de tokens deberá retrasarse con `quarkus.oidc-client.early-tokens-acquisition=false` ."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "Puede registrar selectivamente `OidcClientRequestFilter` utilizando las anotaciones `io.quarkus.oidc.client.filter.OidcClientFilter` o `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if the `quarkus.oidc-client-filter.register-filter=true` property is set."
msgstr "Alternativamente, `OidcClientRequestFilter` puede registrarse automáticamente con todos los clientes MP Rest o Jakarta REST si se establece la propiedad `quarkus.oidc-client-filter.register-filter=true` ."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid ""
"`OidcClientRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-filter.client-name` configuration property.\n"
"You can also select `OidcClient` by setting the `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-filter.client-name` configuration property.\n"
"For example, given <<use-oidc-clients,this>> `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr ""

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Use a custom RestClient ClientFilter"
msgstr "Utilizar un RestClient ClientFilter personalizado"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you prefer, you can use your own custom filter and inject `Tokens`:"
msgstr "Si lo prefiere, puede utilizar su propio filtro personalizado e inyectar `Tokens` :"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The `Tokens` producer will acquire and refresh the tokens, and the custom filter will decide how and when to use the token."
msgstr "El productor de `Tokens` adquirirá y actualizará los tokens, y el filtro personalizado decidirá cómo y cuándo utilizar el token."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can also inject named `Tokens`, see <<named-oidc-clients,Inject named OidcClient and Tokens>>"
msgstr "También puede inyectar named `Tokens` , consulte xref:named-oidc-clients[Inyectar named OidcClient y Tokens]"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Refreshing access tokens"
msgstr "Actualización de las fichas de acceso"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"`OidcClientRequestReactiveFilter`, `OidcClientRequestFilter` and `Tokens` producers will refresh the current expired access token if the refresh token is available.\n"
"Additionally, the `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens that might cause HTTP 401 errors. For example, if this property is set to `3S` and the access token will expire in less than 3 seconds, then this token will be auto-refreshed."
msgstr "`OidcClientRequestReactiveFilter` , `OidcClientRequestFilter` y `Tokens` refrescarán el token de acceso caducado actual si el token de refresco está disponible. Además, la propiedad `quarkus.oidc-client.refresh-token-time-skew` puede utilizarse para un refresco preventivo del token de acceso para evitar el envío de tokens de acceso casi caducados que podrían causar errores HTTP 401. Por ejemplo, si esta propiedad se establece en `3S` y el token de acceso caducará en menos de 3 segundos, este token se refrescará automáticamente."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If the access token needs to be refreshed, but no refresh token is available, then an attempt is made to acquire a new token by using a configured grant, such as `client_credentials`."
msgstr "Si es necesario actualizar el token de acceso, pero no se dispone de un token de actualización, se intenta adquirir un nuevo token mediante una concesión configurada, como `client_credentials` ."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Some OpenID Connect Providers will not return a refresh token in a `client_credentials` grant response. For example, starting from Keycloak 12, a refresh token will not be returned by default for `client_credentials`. The providers might also restrict the number of times a refresh token can be used."
msgstr "Algunos proveedores de OpenID Connect no devolverán un token de actualización en una respuesta de concesión de `client_credentials` . Por ejemplo, a partir de Keycloak 12, no se devolverá un token de actualización por defecto para `client_credentials` . Los proveedores también pueden restringir el número de veces que se puede utilizar un token de actualización."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Revoking access tokens"
msgstr "Revocación de los tokens de acceso"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If your OpenId Connect provider, such as Keycloak, supports a token revocation endpoint, then `OidcClient#revokeAccessToken` can be used to revoke the current access token. The revocation endpoint URL will be discovered alongside the token request URI or can be configured with `quarkus.oidc-client.revoke-path`."
msgstr "Si su proveedor de OpenId Connect, como Keycloak, admite un punto final de revocación de tokens, podrá utilizar `OidcClient#revokeAccessToken` para revocar el token de acceso actual. La URL del punto final de revocación se descubrirá junto a la URI de solicitud del token o puede configurarse con `quarkus.oidc-client.revoke-path` ."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You might want to have the access token revoked if using this token with a REST client fails with an HTTP `401` status code or if the access token has already been used for a long time and you would like to refresh it."
msgstr "Es posible que desee revocar el token de acceso si al utilizarlo con un cliente REST falla con un código de estado HTTP `401` o si el token de acceso ya se ha utilizado durante mucho tiempo y desea actualizarlo."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "This can be achieved by requesting a token refresh by using a refresh token. However, if the refresh token is unavailable, you can refresh it by revoking it first and then requesting a new access token."
msgstr "Esto puede conseguirse solicitando una actualización del token mediante un token de actualización. Sin embargo, si el token de refresco no está disponible, puede refrescarlo revocándolo primero y solicitando después un nuevo token de acceso."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "OidcClient authentication"
msgstr "Autenticación OidcClient"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"`OidcClient` has to authenticate to the OpenID Connect Provider for the `client_credentials` and other grant requests to succeed.\n"
"All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "`OidcClient` tiene que autenticarse en el proveedor de OpenID Connect para que la `client_credentials` y otras solicitudes de concesión tengan éxito. Se admiten todas las opciones de link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[autenticación de cliente OIDC] , por ejemplo:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`client_secret_basic`:"
msgstr "`client_secret_basic`:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
msgstr "O con el secreto recuperado de un xref:credentials-provider.adoc[CredentialsProvider] :"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`client_secret_post`:"
msgstr "`client_secret_post`:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`client_secret_jwt`, signature algorithm is `HS256`:"
msgstr "`client_secret_jwt`El algoritmo de firma es `HS256`:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider], signature algorithm is `HS256`:"
msgstr "O con el secreto recuperado de un xref:credentials-provider.adoc[CredentialsProvider] , el algoritmo de firma es `HS256` :"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`private_key_jwt` with the PEM key file, signature algorithm is `RS256`:"
msgstr "`private_key_jwt` con el archivo de claves PEM, el algoritmo de firma es `RS256`:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`private_key_jwt` with the keystore file, signature algorithm is `RS256`:"
msgstr "`private_key_jwt` con el archivo keystore, el algoritmo de firma es `RS256` :"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr "El uso de los métodos de autenticación `client_secret_jwt` o `private_key_jwt` garantiza que ningún secreto del cliente pase por el cable."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Additional JWT authentication options"
msgstr "Opciones adicionales de autenticación JWT"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If either `client_secret_jwt` or `private_key_jwt` authentication methods are used, then the JWT signature algorithm, key identifier, audience, subject, and issuer can be customized, for example:"
msgstr "Si se utilizan los métodos de autenticación `client_secret_jwt` o `private_key_jwt` , se pueden personalizar, por ejemplo, el algoritmo de firma JWT, el identificador de clave, el público, el asunto y el emisor:"

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Apple POST JWT"
msgstr "Apple POST JWT"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account-specific issuer and subject properties."
msgstr "El proveedor Apple OpenID Connect utiliza un método `client_secret_post` en el que un secreto es un JWT producido con un método de autenticación `private_key_jwt` pero con propiedades de emisor y sujeto específicas de la cuenta de Apple."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`quarkus-oidc-client` supports a non-standard `client_secret_post_jwt` authentication method, which can be configured as follows:"
msgstr "`quarkus-oidc-client` admite un método de autenticación no estándar `client_secret_post_jwt` , que puede configurarse del siguiente modo:"

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Mutual TLS"
msgstr "TLS mutuo"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Some OpenID Connect Providers require that a client is authenticated as part of the mutual TLS (`mTLS`) authentication process."
msgstr "Algunos proveedores de OpenID Connect requieren que el cliente se autentique como parte del proceso de autenticación mutua TLS ( `mTLS` )."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`quarkus-oidc-client` can be configured as follows to support `mTLS`:"
msgstr "`quarkus-oidc-client` puede configurarse de la siguiente manera para admitir `mTLS` :"

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Testing"
msgstr "Probando"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Start by adding the following dependencies to your test project:"
msgstr "Comience por añadir las siguientes dependencias a su proyecto de prueba:"

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Add the following dependencies to your test project:"
msgstr "Añada las siguientes dependencias a su proyecto de prueba:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Write a Wiremock-based `QuarkusTestResourceLifecycleManager`, for example:"
msgstr "Escriba un `QuarkusTestResourceLifecycleManager` basado en Wiremock, por ejemplo:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Prepare the REST test endpoints. You can have the test front-end endpoint, which uses the injected MP REST client with a registered OidcClient filter, call the downstream endpoint. This endpoint echoes the token back. For example, see the `integration-tests/oidc-client-wiremock` in the `main` Quarkus repository."
msgstr "Prepare los puntos finales de prueba REST. Puede hacer que el punto final front-end de prueba, que utiliza el cliente MP REST inyectado con un filtro OidcClient registrado, llame al punto final downstream. Este punto final se hace eco del token de vuelta. Por ejemplo, consulte la página `integration-tests/oidc-client-wiremock` en el repositorio `main` Quarkus."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Set `application.properties`, for example:"
msgstr "Establece `application.properties`, por ejemplo:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "And finally, write the test code. Given the Wiremock-based resource above, the first test invocation should return the `access_token_1` access token, which will expire in 4 seconds. Use `awaitility` to wait for about 5 seconds, and now the next test invocation should return the `access_token_2` access token, which confirms the expired `access_token_1` access token has been refreshed."
msgstr "Y por último, escriba el código de prueba. Dado el recurso basado en Wiremock anterior, la primera invocación de prueba debería devolver el testigo de acceso `access_token_1` , que caducará en 4 segundos. Utilice `awaitility` para esperar unos 5 segundos, y ahora la siguiente invocación de prueba debería devolver el token de acceso `access_token_2` , que confirma que el token de acceso `access_token_1` caducado ha sido refrescado."

#. type: Title ====
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Keycloak"
msgstr "Keycloak"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work with Keycloak, you can use the same approach described in the xref:security-oidc-bearer-token-authentication.adoc#integration-testing-keycloak[OpenID Connect Bearer Token Integration testing] Keycloak section."
msgstr "Si trabaja con Keycloak, puede utilizar el mismo enfoque descrito en la sección xref:security-oidc-bearer-token-authentication.adoc#integration-testing-keycloak[Integración del token portador de OpenID Connect probando] Keycloak."

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "How to check the errors in the logs"
msgstr "Cómo comprobar los errores en los registros"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Enable `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` level logging to see more details about the token acquisition and refresh errors:"
msgstr "Active el registro de nivel `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` para ver más detalles sobre los errores de adquisición y actualización de fichas:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Enable `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` level logging to see more details about the OidcClient initialization errors:"
msgstr "Active el registro de nivel `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` para ver más detalles sobre los errores de inicialización de OidcClient:"

#. type: Title ==
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "OIDC request filters"
msgstr "Filtros de solicitud OIDC"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can filter OIDC requests made by Quarkus to the OIDC provider by registering one or more `OidcRequestFiler` implementations, which can update or add new request headers. For example, a filter can analyze the request body and add its digest as a new header value:"
msgstr "Puede filtrar las solicitudes de OIDC realizadas por Quarkus al proveedor de OIDC registrando una o varias implementaciones de `OidcRequestFiler` , que pueden actualizar o añadir nuevas cabeceras de solicitud. Por ejemplo, un filtro puede analizar el cuerpo de la solicitud y añadir su compendio como un nuevo valor de cabecera:"

#. type: Title ==
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Token Propagation Reactive"
msgstr "Propagación de tokens reactiva"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides a RestEasy Reactive Client, `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter`, that simplifies the propagation of authentication information. This client propagates the xref:security-oidc-bearer-token-authentication.adoc[bearer token] present in the currently active request or the token acquired from the xref:security-oidc-code-flow-authentication.adoc[authorization code flow mechanism] as the HTTP `Authorization` header's `Bearer` scheme value."
msgstr "La extensión `quarkus-oidc-token-propagation-reactive` proporciona un cliente reactivo RestEasy, `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` , que simplifica la propagación de la información de autenticación. Este cliente propaga el xref:security-oidc-bearer-token-authentication.adoc[token de portador] presente en la solicitud activa en ese momento o el token adquirido del xref:security-oidc-code-flow-authentication.adoc[mecanismo de flujo de código de] autorización como valor del esquema `Bearer` de la cabecera HTTP `Authorization` ."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `AccessTokenRequestReactiveFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotation, for example:"
msgstr "Puede registrar `AccessTokenRequestReactiveFilter` de forma selectiva mediante la anotación `io.quarkus.oidc.token.propagation.AccessToken` o `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` , por ejemplo:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Additionally, `AccessTokenRequestReactiveFilter` can support a complex application that needs to exchange the tokens before propagating them."
msgstr "Además, `AccessTokenRequestReactiveFilter` puede soportar una aplicación compleja que necesite intercambiar los tokens antes de propagarlos."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or another OIDC provider that supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant, then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr "Si trabaja con link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] u otro proveedor de OIDC que admita una concesión de token link:https://tools.ietf.org/html/rfc8693[de] intercambio, puede configurar `AccessTokenRequestReactiveFilter` para intercambiar el token de esta forma:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Note `AccessTokenRequestReactiveFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr "Nota `AccessTokenRequestReactiveFilter` utilizará `OidcClient` para intercambiar el token actual, y usted puede utilizar `quarkus.oidc-client.grant-options.exchange` para establecer las propiedades de intercambio adicionales que espera su proveedor de OpenID Connect."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exchange the current token, then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr "Si trabaja con proveedores como `Azure` que link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[requieren el uso de] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[la concesión de tokens portadores JWT] para intercambiar el token actual, entonces puede configurar `AccessTokenRequestReactiveFilter` para intercambiar el token de esta forma:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`AccessTokenRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation-reactive.client-name` configuration property."
msgstr "`AccessTokenRequestReactiveFilter` utiliza un `OidcClient` por defecto. Se puede seleccionar un `OidcClient` con nombre mediante una propiedad de configuración `quarkus.oidc-token-propagation-reactive.client-name` ."

#. type: Title ==
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Token Propagation"
msgstr "Propagación de fichas"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"The `quarkus-oidc-token-propagation` extension provides two Jakarta REST `jakarta.ws.rs.client.ClientRequestFilter` class implementations that simplify the propagation of authentication information.\n"
"`io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` propagates the xref:security-oidc-bearer-token-authentication.adoc[Bearer token] present in the current active request or the token acquired from the xref:security-oidc-code-flow-authentication.adoc[Authorization code flow mechanism], as the HTTP `Authorization` header's `Bearer` scheme value.\n"
"The `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` provides the same functionality but, in addition, provides support for JWT tokens."
msgstr "La extensión `quarkus-oidc-token-propagation` proporciona dos implementaciones de la clase Jakarta REST `jakarta.ws.rs.client.ClientRequestFilter` que simplifican la propagación de la información de autenticación. `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` propaga el token xref:security-oidc-bearer-token-authentication.adoc[Bearer] presente en la solicitud activa actual o el token adquirido del xref:security-oidc-code-flow-authentication.adoc[mecanismo de flujo de código] de autorización, como valor del esquema `Bearer` del encabezado HTTP `Authorization` . `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` ofrece la misma funcionalidad pero, además, proporciona soporte para tokens JWT."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "When you need to propagate the current Authorization Code Flow access token, then the immediate token propagation will work well - as the code flow access tokens (as opposed to ID tokens) are meant to be propagated for the current Quarkus endpoint to access the remote services on behalf of the currently authenticated user."
msgstr "Cuando necesite propagar el token de acceso al flujo de código de autorización actual, entonces la propagación inmediata de tokens funcionará bien - ya que los tokens de acceso al flujo de código (a diferencia de los tokens de identificación) están destinados a ser propagados para que el punto final actual de Quarkus acceda a los servicios remotos en nombre del usuario autenticado en ese momento."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "However, the direct end-to-end Bearer token propagation should be avoided. For example, `Client -> Service A -> Service B` where `Service B` receives a token sent by `Client` to `Service A`. In such cases, `Service B` cannot distinguish if the token came from `Service A` or from `Client` directly. For `Service B` to verify the token came from `Service A`, it should be able to assert a new issuer and audience claims."
msgstr "Sin embargo, debe evitarse la propagación directa de token de portador de extremo a extremo. Por ejemplo, en `Client → Service A → Service B` , donde `Service B` recibe un token enviado por `Client` a `Service A` . En estos casos, `Service B` no puede distinguir si el token procede de `Service A` o de `Client` directamente. Para que `Service B` pueda verificar que el token procede de `Service A` , debe poder afirmar un nuevo emisor y reclamaciones de audiencia."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Additionally, a complex application might need to exchange or update the tokens before propagating them. For example, the access context might be different when `Service A` is accessing `Service B`. In this case, `Service A` might be granted a narrow or completely different set of scopes to access `Service B`."
msgstr "Además, una aplicación compleja podría necesitar intercambiar o actualizar los tokens antes de propagarlos. Por ejemplo, el contexto de acceso podría ser diferente cuando `Service A` accede a `Service B` . En este caso, podría concederse a `Service A` un conjunto de ámbitos reducido o completamente diferente para acceder a `Service B` ."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The following sections show how `AccessTokenRequestFilter` and `JsonWebTokenRequestFilter` can help."
msgstr "Las siguientes secciones muestran cómo `AccessTokenRequestFilter` y `JsonWebTokenRequestFilter` pueden ayudar."

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "RestClient AccessTokenRequestFilter"
msgstr "RestClient AccessTokenRequestFilter"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`AccessTokenRequestFilter` treats all tokens as Strings, and as such, it can work with both JWT and opaque tokens."
msgstr "`AccessTokenRequestFilter` trata todos los tokens como Strings, y como tal, puede trabajar tanto con JWT como con tokens opacos."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "Puede registrar selectivamente `AccessTokenRequestFilter` utilizando `io.quarkus.oidc.token.propagation.AccessToken` o `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, por ejemplo:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if the `quarkus.oidc-token-propagation.register-filter` property is set to `true` and `quarkus.oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
msgstr "Alternativamente, `AccessTokenRequestFilter` puede registrarse automáticamente con todos los clientes MP Rest o Jakarta REST si la propiedad `quarkus.oidc-token-propagation.register-filter` se establece en `true` y la propiedad `quarkus.oidc-token-propagation.json-web-token` se establece en `false` (que es un valor por defecto)."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Exchange token before propagation"
msgstr "Ficha de intercambio antes de la propagación"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If the current access token needs to be exchanged before propagation and you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenID Connect Provider which supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant, then you can configure `AccessTokenRequestFilter` like this:"
msgstr "Si es necesario intercambiar el token de acceso actual antes de la propagación y trabaja con link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] u otro proveedor de OpenID Connect que admita una concesión de token de link:https://tools.ietf.org/html/rfc8693[intercambio] , puede configurar `AccessTokenRequestFilter` de la siguiente manera:"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exchange the current token, then you can configure `AccessTokenRequestFilter` to exchange the token like this:"
msgstr "Si trabaja con proveedores como `Azure` que link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[requieren el uso de] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[la concesión de tokens portadores JWT] para intercambiar el token actual, entonces puede configurar `AccessTokenRequestFilter` para intercambiar el token de esta forma:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Note `AccessTokenRequestFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr "Nota `AccessTokenRequestFilter` utilizará `OidcClient` para intercambiar el token actual, y usted puede utilizar `quarkus.oidc-client.grant-options.exchange` para establecer las propiedades de intercambio adicionales que espera su proveedor de OpenID Connect."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`AccessTokenRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation.client-name` configuration property."
msgstr "`AccessTokenRequestFilter` utiliza un `OidcClient` por defecto. Se puede seleccionar un nombre `OidcClient` con una propiedad de configuración `quarkus.oidc-token-propagation.client-name`."

#. type: Title ===
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "RestClient JsonWebTokenRequestFilter"
msgstr "RestClient JsonWebTokenRequestFilter"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using `JsonWebTokenRequestFilter` is recommended if you work with Bearer JWT tokens where these tokens can have their claims, such as `issuer` and `audience` modified and the updated tokens secured (for example, re-signed) again. It expects an injected `org.eclipse.microprofile.jwt.JsonWebToken` and, therefore, will not work with the opaque tokens. Also, if your OpenID Connect Provider supports a Token Exchange protocol, then it is recommended to use `AccessTokenRequestFilter` instead - as both JWT and opaque bearer tokens can be securely exchanged with `AccessTokenRequestFilter`."
msgstr "Se recomienda utilizar `JsonWebTokenRequestFilter` si trabaja con tokens JWT portadores en los que estos tokens pueden tener sus reivindicaciones, como `issuer` y `audience` modificados y los tokens actualizados asegurados (por ejemplo, re-firmados) de nuevo. Espera un `org.eclipse.microprofile.jwt.JsonWebToken` inyectado y, por lo tanto, no funcionará con los tokens opacos. Además, si su proveedor de OpenID Connect admite un protocolo de intercambio de tokens, se recomienda utilizar `AccessTokenRequestFilter` en su lugar, ya que tanto los tokens JWT como los opacos pueden intercambiarse de forma segura con `AccessTokenRequestFilter` ."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`JsonWebTokenRequestFilter` makes it easy for `Service A` implementations to update the injected `org.eclipse.microprofile.jwt.JsonWebToken` with the new `issuer` and `audience` claim values and secure the updated token again with a new signature. The only difficult step is ensuring that `Service A` has a signing key; it should be provisioned from a secure file system or remote secure storage such as Vault."
msgstr "`JsonWebTokenRequestFilter` hace que sea fácil para las implementaciones de `Service A` actualizar el `org.eclipse.microprofile.jwt.JsonWebToken` inyectado con los nuevos valores de reclamo `issuer` y `audience` y asegurar de nuevo el token actualizado con una nueva firma. El único paso difícil es asegurarse de que `Service A` tiene una clave de firma; debería aprovisionarse desde un sistema de archivos seguro o un almacenamiento seguro remoto como Vault."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `JsonWebTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.JsonWebToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "Puede registrar selectivamente `JsonWebTokenRequestFilter` utilizando `io.quarkus.oidc.token.propagation.JsonWebToken` o `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, por ejemplo:"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MicroProfile REST or Jakarta REST clients if both `quarkus.oidc-token-propagation.register-filter` and `quarkus.oidc-token-propagation.json-web-token` properties are set to `true`."
msgstr "Alternativamente, `JsonWebTokenRequestFilter` puede registrarse automáticamente con todos los clientes REST de MicroProfile o REST de Jakarta si ambas propiedades `quarkus.oidc-token-propagation.register-filter` y `quarkus.oidc-token-propagation.json-web-token` se establecen en `true` ."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Update token before propagation"
msgstr "Actualizar token antes de la propagación"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If the injected token needs to have its `iss` (issuer) or `aud` (audience) claims updated and secured again with a new signature, then you can configure `JsonWebTokenRequestFilter` like this:"
msgstr "Si el token inyectado necesita que se actualicen sus reivindicaciones `iss` (emisor) o `aud` (público) y se asegure de nuevo con una nueva firma, puede configurar `JsonWebTokenRequestFilter` de la siguiente manera:"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "As mentioned, use `AccessTokenRequestFilter` if you work with Keycloak or an OpenID Connect Provider that supports a Token Exchange protocol."
msgstr "Como ya se ha mencionado, utilice `AccessTokenRequestFilter` si trabaja con Keycloak o con un proveedor de OpenID Connect que admita un protocolo de intercambio de tokens."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"You can generate the tokens as described in xref:security-oidc-bearer-token-authentication.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] section.\n"
"Prepare the REST test endpoints. You can have the test front-end endpoint, which uses the injected MP REST client with a registered token propagation filter, call the downstream endpoint. For example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
msgstr "Puede generar los tokens como se describe en la sección xref:security-oidc-bearer-token-authentication.adoc#integration-testing[Pruebas de integración de tokens de portador de OpenID Connect] . Prepare los puntos finales de prueba REST. Puede hacer que el punto final front-end de prueba, que utiliza el cliente MP REST inyectado con un filtro de propagación de tokens registrado, llame al punto final downstream. Por ejemplo, consulte la página `integration-tests/oidc-token-propagation` en el repositorio `main` Quarkus."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` which can be used to propagate the current `Bearer` or `Authorization Code Flow` access tokens."
msgstr "La extensión `quarkus-oidc-token-propagation-reactive` proporciona `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` que puede utilizarse para propagar los tokens de acceso actuales `Bearer` o `Authorization Code Flow`."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"The `quarkus-oidc-token-propagation-reactive` extension (as opposed to the non-reactive `quarkus-oidc-token-propagation` extension) does not currently support the exchanging or resigning of the tokens before the propagation.\n"
"However, these features might be added in the future."
msgstr "La extensión `quarkus-oidc-token-propagation-reactive` (a diferencia de la extensión no reactiva `quarkus-oidc-token-propagation` ) no admite actualmente el intercambio o la renuncia de las fichas antes de la propagación. Sin embargo, estas características podrían añadirse en el futuro."

#. type: Title ==
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "GraphQL client integration"
msgstr "Integración del cliente GraphQL"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"The `quarkus-oidc-client-graphql` extension provides a way to integrate an OIDC client into xref:smallrye-graphql-client.adoc[GraphQL clients] paralleling the approach used with REST clients.\n"
"When this extension is active, any GraphQL client configured through properties (rather than programmatically by the builder) will use the OIDC client to acquire an access token, which it will then set as the `Authorization` header value.\n"
"The OIDC client will also refresh expired access tokens."
msgstr "La extensión `quarkus-oidc-client-graphql` proporciona una forma de integrar un cliente OIDC en xref:smallrye-graphql-client.adoc[los] clientes GraphQL de forma paralela al enfoque utilizado con los clientes REST. Cuando esta extensión está activa, cualquier cliente GraphQL configurado a través de propiedades (en lugar de programáticamente por el constructor) utilizará el cliente OIDC para adquirir un token de acceso, que luego establecerá como valor de cabecera `Authorization` . El cliente OIDC también refrescará los tokens de acceso caducados."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "To configure which OIDC client should be used by the GraphQL client, select one of the configured OIDC clients with the `quarkus.oidc-client-graphql.client-name` property, for example:"
msgstr "Para configurar qué cliente OIDC debe utilizar el cliente GraphQL, seleccione uno de los clientes OIDC configurados con la propiedad `quarkus.oidc-client-graphql.client-name` , por ejemplo:"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"quarkus.oidc-client-graphql.client-name=oidc-client-for-graphql\n"
"\n"
"# example declaration of the OIDC client itself\n"
"quarkus.oidc-client.oidc-client-for-graphql.auth-server-url=${keycloak.url}\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant.type=password\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant-options.password.username=${username}\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant-options.password.password=${password}\n"
"quarkus.oidc-client.oidc-client-for-graphql.client-id=${quarkus.oidc.client-id}\n"
"quarkus.oidc-client.oidc-client-for-graphql.credentials.client-secret.value=${keycloak.credentials.secret}\n"
"quarkus.oidc-client.oidc-client-for-graphql.credentials.client-secret.method=POST"
msgstr "quarkus.oidc-client-graphql.client-name=oidc-client-for-graphql"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"If you don't specify the `quarkus.oidc-client-graphql.client-name` property,\n"
"GraphQL clients will use the default OIDC client (without an explicit name)."
msgstr "Si no especifica la propiedad `quarkus.oidc-client-graphql.client-name` , los clientes GraphQL utilizarán el cliente OIDC predeterminado (sin nombre explícito)."

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"Specifically for type-safe GraphQL clients, you can override this on a\n"
"per-client basis by annotating the `GraphQLClientApi` interface with\n"
"`@io.quarkus.oidc.client.filter.OidcClientFilter`. For example:"
msgstr "Específicamente para los clientes GraphQL de tipo seguro, puede anular esto en función de cada cliente anotando la interfaz `GraphQLClientApi` con `@io.quarkus.oidc.client.filter.OidcClientFilter` . Por ejemplo:"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"To be able to use this with a programmatically created GraphQL client, both\n"
"builders (`VertxDynamicGraphQLClientBuilder` and\n"
"`VertxTypesafeGraphQLClientBuilder`) contain a method `dynamicHeader(String,\n"
"Uni<String>`) that allows you to plug in a header that might change for\n"
"every request. To plug an OIDC client into it, use"
msgstr "Para poder utilizarlo con un cliente GraphQL creado mediante programación, ambos constructores ( `VertxDynamicGraphQLClientBuilder` y `VertxTypesafeGraphQLClientBuilder` ) contienen un método `dynamicHeader(String, Uni<String>` ) que le permite enchufar una cabecera que podría cambiar para cada solicitud. Para enchufarle un cliente OIDC, utilice"

#. type: Title ==
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "References"
msgstr "Referencias"

#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart]."
msgstr "xref:security-openid-connect-client.adoc[Inicio rápido del cliente OpenID Connect y de la propagación de tokens] ."

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr "xref:security-oidc-bearer-token-authentication.adoc[Autenticación del portador OIDC]"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications]"
msgstr "xref:security-oidc-code-flow-authentication.adoc[Mecanismo de flujo de código OIDC para proteger las aplicaciones web]"

#. type: Plain text
#: _versions/main/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""
"xref:security-overview.adoc\n"
"[Visión general de Quarkus Security]"
